diff --git a/node_modules/react-native-calendars/src/calendar/day/index.d.ts b/node_modules/react-native-calendars/src/calendar/day/index.d.ts
index 11af875..0bf8411 100644
--- a/node_modules/react-native-calendars/src/calendar/day/index.d.ts
+++ b/node_modules/react-native-calendars/src/calendar/day/index.d.ts
@@ -2,10 +2,10 @@ import React from 'react';
 import { DateData } from '../../types';
 import { BasicDayProps } from './basic';
 export interface DayProps extends BasicDayProps {
-    /** Provide custom day rendering component */
-    dayComponent?: React.ComponentType<DayProps & {
-        date?: DateData;
-    }>;
+  /** Provide custom day rendering component */
+  dayComponent?: React.ComponentType<DayProps & {
+    date?: DateData;
+  }>;
 }
 declare const Day: any;
 export default Day;
diff --git a/node_modules/react-native-calendars/src/calendar/index.js b/node_modules/react-native-calendars/src/calendar/index.js
index d052712..bca2384 100644
--- a/node_modules/react-native-calendars/src/calendar/index.js
+++ b/node_modules/react-native-calendars/src/calendar/index.js
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import XDate from 'xdate';
 import memoize from 'memoize-one';
 import React, { Component } from 'react';
-import { View } from 'react-native';
+import { TouchableOpacity, View,Text, StyleSheet } from 'react-native';
 // @ts-expect-error
 import GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';
 import { page, isGTE, isLTE, sameMonth } from '../dateutils';
@@ -15,6 +15,7 @@ import styleConstructor from './style';
 import CalendarHeader from './header';
 import Day from './day/index';
 import BasicDay from './day/basic';
+import moment from 'moment';
 /**
  * @description: Calendar component
  * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendars.js
@@ -46,7 +47,8 @@ class Calendar extends Component {
         disabledByDefault: PropTypes.bool,
         headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
         customHeader: PropTypes.any,
-        allowSelectionOutOfRange: PropTypes.bool
+        allowSelectionOutOfRange: PropTypes.bool,
+        isCustomDateContainer: PropTypes.bool,
     };
     static defaultProps = {
         enableSwipeMonths: false
@@ -133,14 +135,34 @@ class Calendar extends Component {
         </BasicDay>
       </View>);
     });
+    
     renderDay(day, id) {
         const { hideExtraDays, markedDates } = this.props;
         const dayProps = extractComponentProps(Day, this.props);
+        const date = moment(new Date(day[0])).format('YYYY-MM-DD');
+        const dayDisplay =  moment(new Date(day[0])).format('DD');
+        const monthDisplay =  moment(new Date(day[0])).format('MM');
+        const currentMonth =moment(new Date( this.state.currentMonth[0])).format('MM');
         if (!sameMonth(day, this.state.currentMonth) && hideExtraDays) {
             return <View key={id} style={this.style.emptyDayContainer}/>;
         }
-        return (<View style={this.style.dayContainer} key={id}>
-        <Day {...dayProps} date={toMarkingFormat(day)} state={getState(day, this.state.currentMonth, this.props)} marking={markedDates?.[toMarkingFormat(day)]} onPress={this.pressDay} onLongPress={this.longPressDay}/>
+        const isActiveDate =date === this.props.current; 
+        const isInitDate = date === this.props.initialDate;
+        const isDateOutMonthActive = monthDisplay !== currentMonth;
+        const customStyleDateContianer = isInitDate ? {...styles.customInitDateContianer,...dayProps.theme.initDateContainer}
+                                        : isActiveDate ? {...styles.customActiveDateContianer,...dayProps.theme.activeDateContainer}
+                                        : {...styles.commonDateContainer,...dayProps.theme.commonDateContainer} || {};
+        const customStyleDateText = isInitDate ? {...styles.initDateText,...dayProps.theme.initDateText}
+                                    : isActiveDate ? {...styles.activeDateText,...dayProps.theme.activeDateText}
+                                    : isDateOutMonthActive ? {...styles.textDateOutMonthActive,...dayProps.theme.outMonthDateText} 
+                                    : {...styles.inMonthDateText,...dayProps.theme.inMonthDateText} 
+        return (<View style={[this.style.dayContainer,styles.dateTextWrapper,customStyleDateContianer]} key={id}>
+          {
+            !this.props.isCustomDateContainer ? <Day {...dayProps} date={toMarkingFormat(day)} state={getState(day, this.state.currentMonth, this.props)} marking={markedDates?.[toMarkingFormat(day)]} onPress={this.pressDay} onLongPress={this.longPressDay}/> :
+            <TouchableOpacity style={[customStyleDateContianer]} onPress={()=>this.props.onDayPress(date)}>
+              <Text style={[styles.dateText,customStyleDateText]}>{dayDisplay}</Text>
+            </TouchableOpacity>
+          }
       </View>);
     }
     renderWeek(days, id) {
@@ -195,4 +217,34 @@ class Calendar extends Component {
       </GestureComponent>);
     }
 }
+
+const styles = StyleSheet.create({
+  dateTextWrapper:{
+    paddingVertical: 6,
+    borderRadius: 20
+  },
+  initDateText:{
+    color: 'yellow',
+    fontWeight: 'bold'
+  },
+  customInitDateContianer:{
+    backgroundColor: 'red'
+  },
+  activeDateText:{
+    color: 'red',
+    fontWeight: 'bold'
+  },
+  customActiveDateContianer:{
+    backgroundColor: 'yellow'
+  },
+  textDateOutMonthActive:{
+    color:'gray'
+  },
+  inMonthDateText:{
+    color:'black',
+  },
+  commonDateContainer:{
+    backgroundColor: 'white'
+  }
+});
 export default Calendar;
diff --git a/node_modules/react-native-calendars/src/dateutils.js b/node_modules/react-native-calendars/src/dateutils.js
index f7ce459..d4dfe55 100644
--- a/node_modules/react-native-calendars/src/dateutils.js
+++ b/node_modules/react-native-calendars/src/dateutils.js
@@ -28,15 +28,15 @@ export function sameWeek(a, b, firstDayOfWeek) {
 export function isPastDate(date) {
     const today = new XDate();
     const d = new XDate(date);
-    if (today.getFullYear() > d.getFullYear()) {
+    if (today?.getFullYear() > d?.getFullYear()) {
         return true;
     }
-    if (today.getFullYear() === d.getFullYear()) {
-        if (today.getMonth() > d.getMonth()) {
+    if (today?.getFullYear() === d?.getFullYear()) {
+        if (today?.getMonth() > d?.getMonth()) {
             return true;
         }
-        if (today.getMonth() === d.getMonth()) {
-            if (today.getDate() > d.getDate()) {
+        if (today?.getMonth() === d?.getMonth()) {
+            if (today?.getDate() > d?.getDate()) {
                 return true;
             }
         }
@@ -44,39 +44,39 @@ export function isPastDate(date) {
     return false;
 }
 export function isToday(date) {
-    return sameDate(date, XDate.today());
+    return sameDate(date, XDate?.today());
 }
 export function isGTE(a, b) {
-    return b.diffDays(a) > -1;
+    return b?.diffDays(a) > -1;
 }
 export function isLTE(a, b) {
-    return a.diffDays(b) > -1;
+    return a?.diffDays(b) > -1;
 }
 export function formatNumbers(date) {
-    const numbers = getDefaultLocale().numbers;
-    return numbers ? date.toString().replace(latinNumbersPattern, (char) => numbers[+char]) : date;
+    const numbers = getDefaultLocale()?.numbers;
+    return numbers ? date?.toString()?.replace(latinNumbersPattern, (char) => numbers[+char]) : date;
 }
 export function fromTo(a, b) {
     const days = [];
     let from = +a;
     const to = +b;
-    for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {
-        days.push(new XDate(from, true));
+    for (; from <= to; from = new XDate(from, true)?.addDays(1)?.getTime()) {
+        days?.push(new XDate(from, true));
     }
     return days;
 }
 export function month(date) {
-    const year = date.getFullYear(), month = date.getMonth();
-    const days = new XDate(year, month + 1, 0).getDate();
+    const year = date?.getFullYear(), month = date?.getMonth();
+    const days = new XDate(year, month + 1, 0)?.getDate();
     const firstDay = new XDate(year, month, 1, 0, 0, 0, true);
     const lastDay = new XDate(year, month, days, 0, 0, 0, true);
     return fromTo(firstDay, lastDay);
 }
 export function weekDayNames(firstDayOfWeek = 0) {
-    let weekDaysNames = getDefaultLocale().dayNamesShort;
+    let weekDaysNames = getDefaultLocale()?.dayNamesShort;
     const dayShift = firstDayOfWeek % 7;
     if (dayShift) {
-        weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));
+        weekDaysNames = weekDaysNames?.slice(dayShift)?.concat(weekDaysNames?.slice(0, dayShift));
     }
     return weekDaysNames;
 }
@@ -87,36 +87,36 @@ export function page(date, firstDayOfWeek = 0, showSixWeeks = false) {
     const fdow = (7 + firstDayOfWeek) % 7 || 7;
     const ldow = (fdow + 6) % 7;
     firstDayOfWeek = firstDayOfWeek || 0;
-    const from = days[0].clone();
-    const daysBefore = from.getDay();
-    if (from.getDay() !== fdow) {
-        from.addDays(-(from.getDay() + 7 - fdow) % 7);
+    const from = days[0]?.clone();
+    const daysBefore = from?.getDay();
+    if (from?.getDay() !== fdow) {
+        from?.addDays(-(from?.getDay() + 7 - fdow) % 7);
     }
-    const to = days[days.length - 1].clone();
-    const day = to.getDay();
+    const to = days[days?.length - 1]?.clone();
+    const day = to?.getDay();
     if (day !== ldow) {
-        to.addDays((ldow + 7 - day) % 7);
+        to?.addDays((ldow + 7 - day) % 7);
     }
-    const daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;
+    const daysForSixWeeks = (daysBefore + days?.length) / 6 >= 6;
     if (showSixWeeks && !daysForSixWeeks) {
-        to.addDays(7);
+        to?.addDays(7);
     }
     if (isLTE(from, days[0])) {
         before = fromTo(from, days[0]);
     }
-    if (isGTE(to, days[days.length - 1])) {
-        after = fromTo(days[days.length - 1], to);
+    if (isGTE(to, days[days?.length - 1])) {
+        after = fromTo(days[days?.length - 1], to);
     }
-    return before.concat(days.slice(1, days.length - 1), after);
+    return before?.concat(days?.slice(1, days?.length - 1), after);
 }
 export function isDateNotInTheRange(minDate, maxDate, date) {
     return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));
 }
 export function getWeekDates(date, firstDay = 0, format) {
-    if (date && parseDate(date).valid()) {
+    if (date && parseDate(date)?.valid()) {
         const current = parseDate(date);
         const daysArray = [current];
-        let dayOfTheWeek = current.getDay() - firstDay;
+        let dayOfTheWeek = current?.getDay() - firstDay;
         if (dayOfTheWeek < 0) {
             // to handle firstDay > 0
             dayOfTheWeek = 7 + dayOfTheWeek;
@@ -124,24 +124,24 @@ export function getWeekDates(date, firstDay = 0, format) {
         let newDate = current;
         let index = dayOfTheWeek - 1;
         while (index >= 0) {
-            newDate = parseDate(newDate).addDays(-1);
-            daysArray.unshift(newDate);
+            newDate = parseDate(newDate)?.addDays(-1);
+            daysArray?.unshift(newDate);
             index -= 1;
         }
         newDate = current;
         index = dayOfTheWeek + 1;
         while (index < 7) {
-            newDate = parseDate(newDate).addDays(1);
-            daysArray.push(newDate);
+            newDate = parseDate(newDate)?.addDays(1);
+            daysArray?.push(newDate);
             index += 1;
         }
         if (format) {
-            return daysArray.map(d => d.toString(format));
+            return daysArray?.map(d => d?.toString(format));
         }
         return daysArray;
     }
 }
 export function generateDay(originDate, daysOffset = 0) {
     const baseDate = new XDate(originDate);
-    return toMarkingFormat(baseDate.clone().addDays(daysOffset));
+    return toMarkingFormat(baseDate?.clone()?.addDays(daysOffset));
 }
